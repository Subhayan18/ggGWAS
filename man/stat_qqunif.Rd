% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_qqunif.R
\name{stat_qqunif}
\alias{stat_qqunif}
\title{QQ-plot}
\usage{
stat_qqunif(mapping = NULL, data = NULL, geom = "point",
  position = "identity", na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, observed.thresh = NULL, ...)
}
\arguments{
\item{observed.thresh}{same scale as observed (e.g. 0.05), observed <= observed.thresh AFTER computing expected}

\item{...}{}

\item{method}{point or raster}
}
\description{
QQ-plot
}
\examples{
require(ggplot2)
n.sample <- 10000
df <- data.frame(P = runif(n.sample), GWAS = sample(c("a","b"), n.sample, replace = TRUE))

## default
(qp <- ggplot(df, aes(observed = P)) +
  stat_qqunif() +
  geom_abline(intercept = 0, slope = 1))

## Group points
(qp <- ggplot(df, aes(observed = P)) + stat_qqunif(aes(group = GWAS, color = GWAS)))

## show only p-values above a cerain threshold
ggplot(df, aes(observed = P)) +
stat_qqunif(observed.thresh = 0.05) +
geom_abline(intercept = 0, slope = 1)

## plot a line instead
ggplot(df, aes(observed = P)) +
stat_qqunif(geom = "line") +
geom_abline(intercept = 0, slope = 1)

## plot efficiently
ggplot(df, aes(observed = P)) +
stat_qqunif(geom = ggrastr:::GeomPointRast) +
geom_abline(intercept = 0, slope = 1)

## adding nice stuff
qp +
  theme(aspect.ratio=1) + ## square shaped
  expand_limits(x = -log10(max(df$P)), y = -log10(max(df$P))) + ## identical limits (meaning truely square)
  ggtitle("QQplot") + ## title
  xlab("Expected -log10(P)") + ## axis labels
  ylab("Observed -log10(P)")

## color
ggplot(df, aes(observed = P, color = GWAS)) +
  stat_qqunif() +
  geom_abline(intercept = 0, slope = 1)

## facet
ggplot(df, aes(observed = P)) +
  facet_wrap(~GWAS) +
  stat_qqunif() +
  geom_abline(intercept = 0, slope = 1)


## group
ggplot(df, aes(observed = P, group = GWAS)) +
  stat_qqunif() +
  geom_abline(intercept = 0, slope = 1)

## group
library(GWAS.utils) ## devtools::install_github("sinarueeger/GWAS.utils")
data("giant")
?giant

giant <- giant \%>\% dplyr::mutate(gr = dplyr::case_when(BETA <= 0 ~ "Neg effect size", BETA > 0 ~ "Pos effect size"))## generate two groups
ggplot(data = giant, aes(observed = P, group = gr, color = gr)) +
  stat_qqunif() +
  geom_abline(intercept = 0, slope = 1)

}
